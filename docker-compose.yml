version: "3.9"
# Which Compose file syntax to use (controls available features).

services:
  # Start the list of services (containers) you want Docker Compose to manage).

  app:
    # The logical name of this service. Used by docker-compose and internal networking.

    container_name: typescript-app
    # The actual Docker container name. Helpful for manual docker commands,

    ports:
      # Begin a list of published port mappings. Maps host ports → container ports.

      - "4000:4000"
      # Host port 4000 is forwarded to port 4000 inside the container.
      # Access your app at http://localhost:4000 on the host machine.

    env_file:
      # Begin a list of files whose KEY=VALUE lines become environment variables
      # inside the container.

      - ./.env
      # Use the .env file in the same folder as this compose file.
      # Each line must be like: MY_VAR=value. Don’t store secrets in version control.
    depends_on:
      - mongo
      - redis
      # This service depends on the "mongo" and "redis" services being started first.
      # Docker Compose will start them in the correct order.

  mongo:
    # A second service named "mongo" to run a MongoDB database.
    image: mongo
    # Use the official "mongo" image from Docker Hub.

    restart: always
    # Always restart the container if it stops (unless explicitly stopped).

    volumes:
      - mongo-data:/data/db
      # Mount the named volume "mongo-data" (defined below) to /data/db inside the container.
      # This is where MongoDB stores its data files, so they persist across container restarts.

    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

  mongo-express:
    # A third service named "mongo-express" to run a web-based MongoDB admin interface.
    image: mongo-express
    # Use the official "mongo-express" image from Docker Hub.
    restart: always

    ports:
      - 8081:8081
      # Host port 8081 is forwarded to port 8081 inside the container.
      # Access mongo-express at http://localhost:8081 on the host machine.

    environment:
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
      ME_CONFIG_BASICAUTH_ENABLED: true
      ME_CONFIG_BASICAUTH_USERNAME: mongoexpressuser
      ME_CONFIG_BASICAUTH_PASSWORD: mongoexpresspass

    depends_on:
      - mongo
      # This service depends on the "mongo" service being started first.

  redis:
    # A fourth service named "redis" to run a Redis in-memory data store.
    image: redis
    # Use the official "redis" image from Docker Hub.

volumes:
  mongo-data:
    # A named volume to persist MongoDB data outside the container's lifecycle.
    # Docker manages this volume's location on the host.
